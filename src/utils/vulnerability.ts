import get from 'lodash.get';

import { isJsonString, trimArray } from './common';
import { color, getSeverityBgColor } from './color';
import { printExceptionReport } from './print';
import { analyzeExpiry } from './date';

import {
  NpmAuditJson,
  v7VulnerabilityVia,
  ProcessedResult,
  ProcessedReport,
  v6Advisory,
  v7Vulnerability,
  NsprcConfigs,
  NsprcFile,
  AuditLevel,
  AuditNumber,
  ParsedCommandOptions,
  PackageFile,
  NpmLsResponse,
} from 'src/types';

const MAX_PATHS_SIZE = 5;

/**
 * Mao out all dependencies path
 * @param {Object} json           JSON output of `npm ls --json` command
 * @param {Array} excludeModules  Modules to be excluded
 * @return {Array}                List of dependencies paths
 */
export function mapModuleDependencies(json: NpmLsResponse, excludeModules?: string[]): string[] {
  if (!json.dependencies) {
    return [];
  }
  return Object.values(json.dependencies).reduce((a: string[], c) => {
    // Replace the full path to relative path, so we get path that starts with 'node_modules/...'
    const relativePath = c.path.replace(/(.*)better-npm-audit\//, '');
    // Exclude some modules
    const shouldExclude = Array.isArray(excludeModules) && excludeModules.some((module) => relativePath.endsWith(module));
    if (!shouldExclude) {
      a.push(relativePath);
    }
    // Recursively mapping the inner dependencies
    return a.concat(mapModuleDependencies(c, excludeModules) as []);
  }, []);
}

/**
 * Converts an audit level to a numeric value
 * @param  {String} auditLevel  Audit level
 * @return {Number}             Numeric level: the higher the number, the more severe it is
 */
export function mapLevelToNumber(auditLevel: AuditLevel | string): AuditNumber {
  switch (auditLevel) {
    case 'info':
      return 0;
    case 'low':
      return 1;
    case 'moderate':
      return 2;
    case 'high':
      return 3;
    case 'critical':
      return 4;
    default:
      return 0;
  }
}

const constructV6TableRow = (vul: v6Advisory, isExcepted: boolean) => {
  // Record this vulnerability into the report, and highlight it using yellow color if it's new
  return [
    color(vul.id, isExcepted ? '' : 'yellow'),
    color(vul.module_name, isExcepted ? '' : 'yellow'),
    color(vul.title, isExcepted ? '' : 'yellow'),
    color(
      trimArray(
        vul.findings.reduce((a, c) => [...a, ...c.paths] as [], []),
        MAX_PATHS_SIZE,
      ).join('\n'),
      isExcepted ? '' : 'yellow',
    ),
    color(vul.severity, isExcepted ? '' : 'yellow', getSeverityBgColor(vul.severity)),
    color(vul.url, isExcepted ? '' : 'yellow'),
    isExcepted ? 'y' : color('n', 'yellow'),
  ];
};

const constructV7TableRow = (vul: v7VulnerabilityVia, isExcepted: boolean, nodes: string[]) => {
  const id = get(vul, 'source', '');

  // Record this vulnerability into the report, and highlight it using yellow color if it's new
  return [
    color(String(id), isExcepted ? '' : 'yellow'),
    color(vul.name, isExcepted ? '' : 'yellow'),
    color(vul.title, isExcepted ? '' : 'yellow'),
    color(trimArray(nodes, MAX_PATHS_SIZE).join('\n'), isExcepted ? '' : 'yellow'),
    color(vul.severity, isExcepted ? '' : 'yellow', getSeverityBgColor(vul.severity)),
    color(vul.url, isExcepted ? '' : 'yellow'),
    isExcepted ? 'y' : color('n', 'yellow'),
  ];
};

/**
 * Analyze the audit JSON string
 * @param  {String}   jsonBuffer          NPM Audit JSON string buffer
 * @param  {Array}    exceptionIds        User's exception IDs
 * @param  {Object}   options             Parsed command options
 * @return {Object}                       Processed vulnerabilities details
 */
export function processAuditJson(jsonBuffer: string, exceptionIds: number[], options: ParsedCommandOptions): ProcessedResult {
  if (!isJsonString(jsonBuffer)) {
    return {
      unhandledIds: [],
      vulnerabilityIds: [],
      report: [],
      scanModules: [],
      failed: true,
    };
  }

  // There is a difference in the audit JSON structure for NPM v6 and v7
  //  - NPM v6 uses `advisories`
  //  - NPM v7 uses `vulnerabilities`
  // Refer to the `test/__mocks__` folder for some sample mockups
  const { advisories, vulnerabilities }: NpmAuditJson = JSON.parse(jsonBuffer);

  // NPM v6 handling
  if (advisories) {
    return Object.values(advisories).reduce(
      (acc: ProcessedResult, cur: v6Advisory) => {
        const shouldAudit: boolean = mapLevelToNumber(cur.severity) >= mapLevelToNumber(options.level);
        const isExcepted: boolean = exceptionIds.includes(Number(cur.id));

        // Record this vulnerability into the report, and highlight it using yellow color if it's new
        acc.report.push(constructV6TableRow(cur, isExcepted));

        acc.vulnerabilityIds.push(Number(cur.id));

        // Found unhandled vulnerabilities
        if (shouldAudit && !isExcepted) {
          acc.unhandledIds.push(Number(cur.id));

          // TODO:
          // Prepare later for scanning usage (only for unhandled vulnerabilities)
          // if (options.scanModules) {
          //   acc.scanModules.push({ id: Number(cur.id) });
          // }
        }

        return acc;
      },
      {
        unhandledIds: [],
        vulnerabilityIds: [],
        report: [],
        scanModules: [],
        npmVersion: 6,
      },
    );
  }

  // NPM v7 handling
  if (vulnerabilities) {
    return Object.values(vulnerabilities).reduce(
      (acc: ProcessedResult, cur: v7Vulnerability) => {
        // Inside `via` array, its either the related module name or the vulnerability source object.
        get(cur, 'via', []).forEach((vul: v7VulnerabilityVia | string) => {
          // The vulnerability ID is labeled as `source`
          const id = get(vul, 'source', '');

          // Let's skip if ID is a string (module name), and only focus on the root vulnerabilities
          if (!id || typeof id === 'string' || typeof vul === 'string') {
            return;
          }

          // Checks if this reported vulnerability is within the target range
          const shouldAudit = mapLevelToNumber(vul.severity) >= mapLevelToNumber(options.level);
          const isExcepted = exceptionIds.includes(id);

          acc.report.push(constructV7TableRow(vul, isExcepted, get(cur, 'nodes', [])));

          acc.vulnerabilityIds.push(id);

          // Found unhandled vulnerabilities
          if (shouldAudit && !isExcepted) {
            acc.unhandledIds.push(id);

            // Prepare later for scanning usage (only for unhandled vulnerabilities)
            if (options.scanModules) {
              acc.scanModules.push({ id, name: cur.name, nodes: cur.nodes });
            }
          }
        });

        return acc;
      },
      {
        unhandledIds: [],
        vulnerabilityIds: [],
        report: [],
        scanModules: [],
        npmVersion: 7,
      },
    );
  }

  return {
    unhandledIds: [],
    vulnerabilityIds: [],
    report: [],
    scanModules: [],
    failed: true,
  };
}

/**
 * Process all exceptions and return a list of exception IDs
 * @param  {Object | Boolean} nsprc           File content from `.nsprc`
 * @param  {Array}            cmdExceptions   Exceptions passed in via command line
 * @return {Array}                            List of found vulnerabilities
 */
export function getExceptionsIds(nsprc?: NsprcFile | PackageFile | boolean, cmdExceptions: number[] = []): number[] {
  // If file does not exists
  if (!nsprc || typeof nsprc !== 'object') {
    // If there are exceptions passed in from command line
    if (cmdExceptions.length) {
      // Display simple info
      console.info(`Exception IDs: ${cmdExceptions.join(', ')}`);
      return cmdExceptions;
    }

    return [];
  }

  // Process the content of the file along with the command line exceptions
  const { exceptionIds, report } = processExceptions(nsprc, cmdExceptions);

  printExceptionReport(report);

  return exceptionIds;
}

/**
 * Filter the given list in the `.nsprc` file for valid exceptions
 * @param  {Object} nsprc           The nsprc file content, contains exception info
 * @param  {Array}  cmdExceptions   Exceptions passed in via command line
 * @return {Object}                 Processed vulnerabilities details
 */
export function processExceptions(nsprc: NsprcFile | PackageFile, cmdExceptions: number[] = []): ProcessedReport {
  return Object.entries(nsprc).reduce(
    (acc: ProcessedReport, [id, details]: [string, string | NsprcConfigs]) => {
      const numberId = Number(id);
      const isValidId = !isNaN(numberId);
      const isActive = Boolean(get(details, 'active', true)); // default to true
      const notes = typeof details === 'string' ? details : get(details, 'notes', '');
      const { valid, expired, years } = analyzeExpiry(get(details, 'expiry'));

      // Color the status accordingly
      let status = color('active', 'green');
      if (expired) {
        status = color('expired', 'red');
      } else if (!isValidId || !valid) {
        status = color('invalid', 'red');
      } else if (!isActive) {
        status = color('inactive', 'yellow');
      }

      // Color the date accordingly
      let expiryDate = get(details, 'expiry') ? new Date(get(details, 'expiry')).toUTCString() : '';
      // If it was expired for more than 5 years ago, warn by coloring the date in red
      if (years && years <= -5) {
        expiryDate = color(expiryDate, 'red');
      } else if (years && years <= -1) {
        expiryDate = color(expiryDate, 'yellow');
      }

      acc.report.push([id, status, expiryDate, notes]);

      if (isValidId && isActive && !expired) {
        acc.exceptionIds.push(numberId);
      }

      return acc;
    },
    {
      exceptionIds: cmdExceptions,
      report: cmdExceptions.map((id) => [String(id), color('active', 'green'), '', '']),
    },
  );
}
